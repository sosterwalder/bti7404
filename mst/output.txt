Removed file MST.jar
jar cvf MST.jar *.class
added manifest
adding: MST$E.class(in = 1036) (out= 617)(deflated 40%)
adding: MST$Msg.class(in = 1164) (out= 683)(deflated 41%)
adding: MST.class(in = 8020) (out= 4124)(deflated 48%)
p2pmpirun -l xferfiles -n 4 MST
Searching nodes for a maximum of 6 seconds ...
** [Warning] Found only 2 host(s).
**           Several processes will be executed on a same host.
* Waiting reply from other nodes.. (listening on port 9804)
* got ACCEPT (FT 192.168.0.101:9898,key=1)
* got ACCEPT (FT 192.168.0.101:9898,key=2)
* got ACCEPT (FT 192.168.0.101:9898,key=3)
* Requesting FT to transfer files ... [ MST.jar ] ... done.
* Waiting for processes to acknowledge file transfer ...
* Wait for SYN message ...
SYN:3:tcp://192.168.0.101:9815
* Wait for SYN message ...
SYN:1:tcp://192.168.0.101:9879
* Wait for SYN message ...
SYN:2:tcp://192.168.0.101:9872
* Check Receive all peers
============================================
[Master of Rank 0]: IP = 192.168.0.101
[Master of Rank 3]: IP = 192.168.0.101
[Master of Rank 1]: IP = 192.168.0.101
[Master of Rank 2]: IP = 192.168.0.101
============================================
* Using protocol = DBRR
* send SYN2: 192.168.0.101:9815
* send SYN2: 192.168.0.101:9879
* send SYN2: 192.168.0.101:9872
* Create a gossip instance.
* Program is executing ...
0: Has 2 neighbors
0: Neighbours:   > 0 -> 2 (6), MST: false,0 -> 1 (16), MST: false
0: Getting minimal edge and postulating to neighbours
0: Found minimal weighted edge: {0 -> 2 (6), MST: false}
0: Sending found edge to neighbour {2}
0: Sending found edge to neighbour {1}
0: Listening to neighbour 2
0: Listening to neighbour 1
3: Has 2 neighbors
3: Neighbours:   > 3 -> 1 (1), MST: false,3 -> 2 (14), MST: false
3: Getting minimal edge and postulating to neighbours
3: Found minimal weighted edge: {3 -> 1 (1), MST: false}
3: Sending found edge to neighbour {1}
3: Sending found edge to neighbour {2}
3: Listening to neighbour 1
3: Listening to neighbour 2
1: Has 3 neighbors
1: Neighbours:   > 1 -> 2 (7), MST: false,1 -> 0 (16), MST: false,1 -> 3 (1), MST: false
1: Getting minimal edge and postulating to neighbours
1: Found minimal weighted edge: {1 -> 3 (1), MST: false}
1: Sending found edge to neighbour {2}
1: Sending found edge to neighbour {0}
1: Sending found edge to neighbour {3}
0: Got response from neighbour 1
1: Listening to neighbour 2
1: Listening to neighbour 0
1: Listening to neighbour 3
1: Got response from neighbour 0
1:   toString for Message {2110164980}
    >type: 1
    >leader: 0
    >edge: 0 -> 2 (6), MST: false
1: Got response from neighbour 3
0:   toString for Message {1817799722}
    >type: 1
    >leader: 1
    >edge: 1 -> 3 (1), MST: false
1:   toString for Message {2030975175}
    >type: 1
    >leader: 3
    >edge: 3 -> 1 (1), MST: false
1: Message from at least one neighbour remaining
1: Sending message to remaining neighbour 2
3: Got response from neighbour 1
3:   toString for Message {1997872302}
    >type: 1
    >leader: 1
    >edge: 1 -> 3 (1), MST: false
2: Has 3 neighbors
2: Neighbours:   > 2 -> 0 (6), MST: false,2 -> 1 (7), MST: false,2 -> 3 (14), MST: false
2: Getting minimal edge and postulating to neighbours
3: Message from at least one neighbour remaining
2: Found minimal weighted edge: {2 -> 0 (6), MST: false}
3: Sending message to remaining neighbour 2
2: Sending found edge to neighbour {0}
0: Message from at least one neighbour remaining
0: Sending message to remaining neighbour 2
0: No new edges found
0: Sending already connected edge 0 -> 2 (6), MST: false to neighbour {1}
2: Sending found edge to neighbour {1}
2: Sending found edge to neighbour {3}
2: Listening to neighbour 0
2: Listening to neighbour 1
2: Listening to neighbour 3
******rank 0, leader: 0
2: Got response from neighbour 0
2:   toString for Message {981921278}
    >type: 1
    >leader: 0
    >edge: 0 -> 2 (6), MST: false
2: Got response from neighbour 1
2:   toString for Message {2033668093}
    >type: 1
    >leader: 1
    >edge: 1 -> 3 (1), MST: false
2: Got response from neighbour 3
2:   toString for Message {509913399}
    >type: 1
    >leader: 3
    >edge: 3 -> 1 (1), MST: false
3: Connected neighbour: 3 -> 1 (1), MST: false
3: Testing 0
3: Testing 1
3: Minimal 1
3: No new edges found, found 3 -> 2 (14), MST: false is already connected
3: Sending already connected edge 3 -> 1 (1), MST: false to neighbour {1}
2: Got responses from all neighbors
2: Connected neighbour: 2 -> 0 (6), MST: false
2: No new edges found, found is already connected
2: Sending already connected edge 2 -> 0 (6), MST: false to neighbour {0}
2: Sending already connected edge 2 -> 0 (6), MST: false to neighbour {1}
2: Sending already connected edge 2 -> 0 (6), MST: false to neighbour {3}
******rank 2, leader: 2
1: Connected neighbour: 1 -> 3 (1), MST: false
1: Testing 0
1: Testing 1
1: Testing 2
1: Minimal 0
1: Added new edge to MST: 2
1: Sending found edge 1 -> 2 (7), MST: false to neighbour {0}
1: Sending found edge 1 -> 2 (7), MST: false to neighbour {3}
******rank 3, leader: 3
******rank 1, leader: 1
